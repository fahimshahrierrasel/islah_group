using DevExpress.XtraEditors;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace IslahGroupInventory
{
    public partial class MainForm : Form
    {
        private int BRANCH_ID = 0;
        private string BRANCH_CODE = "BRANCH0000";
        private int USER_ID = 0;
        private string USERNAME = "Username";

        InventoryDataClassesDataContext dbContext;

        public MainForm(int userId, string aUsername, int branchId, string branchCode)
        {
            USER_ID = userId;
            BRANCH_ID = branchId;
            BRANCH_CODE = branchCode;
            USERNAME = aUsername;

            dbContext = new InventoryDataClassesDataContext();
            InitializeComponent();
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            tsslUsername.Text = USERNAME;
            tsslBranchCode.Text = BRANCH_CODE;
            //LoadRawMaterialTabPage();
        }

        private void tabControlMain_Selected(object sender, TabControlEventArgs e)
        {
            TabPage selectedPage = tabControlMain.SelectedTab;
            if (selectedPage == tabPageRawMaterial)
            {
                //LoadRawMaterialTabPage();
            }
            if (selectedPage == tabPageProducts)
            {
                //LoadProductsPage();
            }
            else if (selectedPage == tabPageStocks)
            {
                //LoadStocksPage();
            }
            else if (selectedPage == tabPagePurchase)
            {
                //LoadPurchasePage();
            }
            else if (selectedPage == tabPageSale)
            {
                //LoadSaleTabPage();
            }
            else if (selectedPage == tabPageVocher)
            {

            }
            else if (selectedPage == tabPageCustomer)
            {
                LoadCustomerPage();
            }
            else if (selectedPage == tabPageSupplier)
            {
                LoadSuppliersPage();
            }
            else if (selectedPage == tabPageUser)
            {

            }
            else if (selectedPage == tabPageBarcode)
            {
                LoadBarcodePage();
            }
        }



        // Customers Tab Methods Start
        private void LoadCustomerPage()
        {
            LoadTotalCustomerCounter();
            LoadCustomersGridView();
            LoadNewCustomerCode();
        }

        private void LoadNewCustomerCode()
        {
            textBoxICCode.Text = String.Format("CUST{0:D5}", dbContext.GetNextCustomerCode());
        }

        private void LoadTotalCustomerCounter()
        {
            var totalCustomer = dbContext.Customers.Count();
            labelTotalCustomers.Text = totalCustomer.ToString();
        }

        private void LoadCustomersGridView()
        {
            // This line of code is generated by Data Source Configuration Wizard
            customersBindingSource.DataSource = new InventoryDataClassesDataContext().Customers;
            gridControlCustomers.RefreshDataSource();
        }

        private void buttonAddCustomer_Click(object sender, EventArgs e)
        {
            // TODO: Customer add validation

            dbContext.Customers.InsertOnSubmit(new Customer()
            {
                CustCode = textBoxICCode.Text,
                CustName = textBoxICName.Text,
                Address = textBoxICAddress.Text,
                ContactNo = textBoxICContactNo.Text,
                Email = textBoxICEmail.Text,
                Remark = textBoxICRemarks.Text,
                Branch_BranchId = BRANCH_ID
            });

            dbContext.SubmitChanges();
            LoadCustomerPage();
            LoadNewCustomerCode();
        }

        private void gridViewCustomer_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            GridView view = sender as GridView;
            var row = view.GetRow(e.RowHandle);
            string custCode = view.GetRowCellValue(e.RowHandle, "CustCode").ToString();

            var customer = dbContext.Customers.SingleOrDefault(c => c.CustCode == custCode);
            var rowCustomer = row as Customer;

            customer.CustName = rowCustomer.CustName;
            customer.Address = rowCustomer.Address;
            customer.ContactNo = rowCustomer.ContactNo;
            customer.Email = rowCustomer.Email;
            customer.Remark = rowCustomer.Remark;

            dbContext.SubmitChanges();
        }
        // Customers Tab Methods End

        // Suppliers Tab Methods Start
        private void LoadSuppliersPage()
        {
            LoadTotalSupplierCounter();
            LoadSuppliersGridView();
        }

        private void LoadSuppliersGridView()
        {
            // This line of code is generated by Data Source Configuration Wizard
            suppliersBindingSource.DataSource = new InventoryDataClassesDataContext().Suppliers;
            gridControlSuppliers.RefreshDataSource();
        }

        private void LoadTotalSupplierCounter()
        {
            var totalSuppliers = dbContext.Suppliers.Count();
            labelTotalSuppliers.Text = totalSuppliers.ToString();
        }

        private void buttonAddSupplier_Click(object sender, EventArgs e)
        {
            // TODO: Add Supplier Validation

            dbContext.Suppliers.InsertOnSubmit(new Supplier()
            {
                SuppCode = textBoxISCode.Text,
                SuppName = textBoxISName.Text,
                Address = textBoxISAddress.Text,
                ContactPerson = textBoxISCPerson.Text,
                ContactNo = textBoxISContactNo.Text,
                Email = textBoxISEmail.Text,
                Remark = textBoxISRemarks.Text,
                Branch_BranchId = 2
            });
            dbContext.SubmitChanges();

            LoadSuppliersPage();
        }

        private void gridViewSuppliers_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            GridView view = sender as GridView;
            var row = view.GetRow(e.RowHandle);
            string suppCode = view.GetRowCellValue(e.RowHandle, "SuppCode").ToString();

            var supplier = dbContext.Suppliers.SingleOrDefault(s => s.SuppCode == suppCode);
            var rowSupplier = row as Supplier;

            supplier.SuppName = rowSupplier.SuppName;
            supplier.Address = rowSupplier.Address;
            supplier.ContactPerson = rowSupplier.ContactPerson;
            supplier.ContactNo = rowSupplier.ContactNo;
            supplier.Email = rowSupplier.Email;
            supplier.Remark = rowSupplier.Remark;

            dbContext.SubmitChanges();
        }
        // Suppliers Tab Methods End

        // Purchase Tab Methods Start 


        // Barcode Print Tab Start
        private void LoadBarcodePage()
        {
            InitializeBarcodeCategoryComboBox();
        }
        private void InitializeBarcodeCategoryComboBox()
        {
            productCategoryBindingSource.DataSource = new InventoryDataClassesDataContext().SubCategories;
            comboBoxProductBarcodeCategory.DataSource = productCategoryBindingSource;
            comboBoxProductBarcodeCategory.DisplayMember = "Name";
            comboBoxProductBarcodeCategory.ValueMember = "Code";
        }
        private void buttonPrintBarcode_Click(object sender, EventArgs e)
        {
            string productCode = textBoxBPCode.Text;
            int.TryParse(textBoxBCNumber.Text, out int totalBarcode);
            if (productCode.Length == 8 && Regex.IsMatch(productCode, @"^\d+$"))
            {
                new ReportPrintTool(new BarcodePrint(productCode, totalBarcode)).ShowPreview();
            }
            else
            {
                XtraMessageBox.Show("Product code should be 8 character long!!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        private void comboBoxProductBarcodeCategory_SelectionChangeCommitted(object sender, EventArgs e)
        {
            textBoxBPCCode.Text = comboBoxProductBarcodeCategory.SelectedValue.ToString();
            textBoxBPCode.Text = textBoxBPCCode.Text + textBoxBCSuffix.Text;
        }
        private void textBoxBCSuffix_KeyUp(object sender, KeyEventArgs e)
        {
            textBoxBPCode.Text = textBoxBPCCode.Text + textBoxBCSuffix.Text;
        }
        // Barcode Print Tab End

    }
}
