using DevExpress.XtraEditors;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraReports.UI;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace IslahGroupInventory
{
    public partial class MainForm : Form
    {
        private int BRANCH_ID = 1;
        InventoryDataClassesDataContext dbContext;
        DataTable purchaseItems;
        DataTable invoiceItems;
        public MainForm()
        {
            dbContext = new InventoryDataClassesDataContext();
            InitializeComponent();

        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            LoadRawMaterialTabPage();
        }

        private void tabControlMain_Selected(object sender, TabControlEventArgs e)
        {
            TabPage selectedPage = tabControlMain.SelectedTab;
            if (selectedPage == tabPageRawMaterial)
            {
                LoadRawMaterialTabPage();
            }
            if (selectedPage == tabPageProducts)
            {
                LoadProductsPage();
            }
            else if (selectedPage == tabPageStocks)
            {
                LoadStocksPage();
            }
            else if (selectedPage == tabPagePurchase)
            {
                LoadPurchasePage();
            }
            else if (selectedPage == tabPageSale)
            {
                LoadSaleTabPage();
            }
            else if (selectedPage == tabPageVocher)
            {

            }
            else if (selectedPage == tabPageCustomer)
            {
                LoadCustomerPage();
            }
            else if (selectedPage == tabPageSupplier)
            {
                LoadSuppliersPage();
            }
            else if (selectedPage == tabPageUser)
            {

            }
            else if (selectedPage == tabPageBarcode)
            {
                LoadBarcodePage();
            }
        }

        // Products Tab Methods Start
        private void LoadProductsPage()
        {
            LoadProductsGridView();
            LoadProductCategory();
            LoadNewProductCode();
        }

        private void LoadNewProductCode()
        {
            textBoxProdCode.Text = String.Format("PROD{0:D5}", dbContext.GetNextProductCode());
        }

        private void LoadProductCategory()
        {
            productCategoryBindingSource.DataSource = new InventoryDataClassesDataContext().SubCategories;
            comboBoxUPCategory.DataSource = productCategoryBindingSource;
        }

        private void LoadProductsGridView()
        {
            // This line of code is generated by Data Source Configuration Wizard
            productsBindingSource.DataSource = new InventoryDataClassesDataContext().Products;
            gridControlProducts.RefreshDataSource();
        }

        private void buttonAddProduct_Click(object sender, EventArgs e)
        {
            // TODO: Validation of the Add Product
            string prodCode = textBoxProdCode.Text;
            string prodName = textBoxName.Text;
            string desc = textBoxDescription.Text;
            string category = comboBoxCategory.Text;
            string sellPrice = textBoxSPrice.Text;
            string rp = textBoxRPoint.Text;
            string discount = textBoxDiscount.Text;
            string stock = textBoxStock.Text;

            Product newProduct = new Product()
            {
                ProdCode = prodCode,
                ProdName = prodName,
                Description = desc,
                SubCategory_Name = category,
                SellingPrice = Convert.ToDecimal(sellPrice),
                ReOrderPoint = Convert.ToInt16(rp),
                Discount = Convert.ToDecimal(discount),
                Stock = Convert.ToInt32(stock),
                Branch_BranchId = BRANCH_ID
            };
            dbContext.Products.InsertOnSubmit(newProduct);
            dbContext.SubmitChanges();
            Console.WriteLine(newProduct.ProdId);
            LoadProductsGridView();
            LoadNewProductCode();
        }

        private void buttonUpdateProduct_Click(object sender, EventArgs e)
        {
            string productCode = textBoxUPCode.Text;
            var product = dbContext.Products.SingleOrDefault(p => p.ProdCode == productCode);
            product.ProdName = textBoxUPName.Text;
            product.Description = textBoxUPDescription.Text;
            product.SubCategory_Name = comboBoxUPCategory.Text;
            product.SellingPrice = Convert.ToDecimal(textBoxUPSPrice.Text);
            product.ReOrderPoint = Convert.ToInt16(textBoxUPRPoint.Text);
            product.Discount = Convert.ToDecimal(textBoxUPDiscount.Text);

            dbContext.SubmitChanges();
            LoadProductsGridView();

            XtraMessageBox.Show("Product Updated!!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void buttonUPLoad_Click(object sender, EventArgs e)
        {
            string productCode = textBoxUPCode.Text;
            var product = dbContext.Products.SingleOrDefault(p => p.ProdCode == productCode);
            if (product != null)
            {
                textBoxUPName.Text = product.ProdName;
                textBoxUPDescription.Text = product.Description;
                comboBoxUPCategory.Text = product.SubCategory_Name;
                textBoxUPSPrice.Text = product.SellingPrice.ToString();
                textBoxUPRPoint.Text = product.ReOrderPoint.ToString();
                textBoxUPDiscount.Text = product.Discount.ToString();
                textBoxUPStock.Text = product.Stock.ToString();
                buttonUpdateProduct.Enabled = true;
            }
            else
            {
                XtraMessageBox.Show("No product found!!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void buttonProductDelete_Click(object sender, EventArgs e)
        {
            string productCode = textBoxDPCode.Text;
            var product = dbContext.Products.SingleOrDefault(p => p.ProdCode == productCode);

            if (product != null)
            {
                dbContext.Products.DeleteOnSubmit(product);
                dbContext.SubmitChanges();
                LoadProductsGridView();
                XtraMessageBox.Show("Product Removed!!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                XtraMessageBox.Show("No product found!!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        // Products Tab Methods End

        // Stocks Tab Methods Start
        private void LoadStocksPage()
        {
            LoadTotalProductCounter();
        }

        private void LoadTotalProductCounter()
        {
            var totalProduct = dbContext.Products.Count();
            labelTotalProduct.Text = totalProduct.ToString();
        }
        // Stocks Tab Methods End

        // Customers Tab Methods Start
        private void LoadCustomerPage()
        {
            LoadTotalCustomerCounter();
            LoadCustomersGridView();
            LoadNewCustomerCode();
        }

        private void LoadNewCustomerCode()
        {
            textBoxICCode.Text = String.Format("CUST{0:D5}", dbContext.GetNextCustomerCode());
        }

        private void LoadTotalCustomerCounter()
        {
            var totalCustomer = dbContext.Customers.Count();
            labelTotalCustomers.Text = totalCustomer.ToString();
        }

        private void LoadCustomersGridView()
        {
            // This line of code is generated by Data Source Configuration Wizard
            customersBindingSource.DataSource = new InventoryDataClassesDataContext().Customers;
            gridControlCustomers.RefreshDataSource();
        }

        private void buttonAddCustomer_Click(object sender, EventArgs e)
        {
            // TODO: Customer add validation

            dbContext.Customers.InsertOnSubmit(new Customer()
            {
                CustCode = textBoxICCode.Text,
                CustName = textBoxICName.Text,
                Address = textBoxICAddress.Text,
                ContactNo = textBoxICContactNo.Text,
                Email = textBoxICEmail.Text,
                Remark = textBoxICRemarks.Text,
                Branch_BranchId = BRANCH_ID
            });

            dbContext.SubmitChanges();
            LoadCustomerPage();
            LoadNewCustomerCode();
        }

        private void gridViewCustomer_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            GridView view = sender as GridView;
            var row = view.GetRow(e.RowHandle);
            string custCode = view.GetRowCellValue(e.RowHandle, "CustCode").ToString();

            var customer = dbContext.Customers.SingleOrDefault(c => c.CustCode == custCode);
            var rowCustomer = row as Customer;

            customer.CustName = rowCustomer.CustName;
            customer.Address = rowCustomer.Address;
            customer.ContactNo = rowCustomer.ContactNo;
            customer.Email = rowCustomer.Email;
            customer.Remark = rowCustomer.Remark;

            dbContext.SubmitChanges();
        }
        // Customers Tab Methods End

        // Suppliers Tab Methods Start
        private void LoadSuppliersPage()
        {
            LoadTotalSupplierCounter();
            LoadSuppliersGridView();
        }

        private void LoadSuppliersGridView()
        {
            // This line of code is generated by Data Source Configuration Wizard
            suppliersBindingSource.DataSource = new InventoryDataClassesDataContext().Suppliers;
            gridControlSuppliers.RefreshDataSource();
        }

        private void LoadTotalSupplierCounter()
        {
            var totalSuppliers = dbContext.Suppliers.Count();
            labelTotalSuppliers.Text = totalSuppliers.ToString();
        }

        private void buttonAddSupplier_Click(object sender, EventArgs e)
        {
            // TODO: Add Supplier Validation

            dbContext.Suppliers.InsertOnSubmit(new Supplier()
            {
                SuppCode = textBoxISCode.Text,
                SuppName = textBoxISName.Text,
                Address = textBoxISAddress.Text,
                ContactPerson = textBoxISCPerson.Text,
                ContactNo = textBoxISContactNo.Text,
                Email = textBoxISEmail.Text,
                Remark = textBoxISRemarks.Text,
                Branch_BranchId = 2
            });
            dbContext.SubmitChanges();

            LoadSuppliersPage();
        }

        private void gridViewSuppliers_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            GridView view = sender as GridView;
            var row = view.GetRow(e.RowHandle);
            string suppCode = view.GetRowCellValue(e.RowHandle, "SuppCode").ToString();

            var supplier = dbContext.Suppliers.SingleOrDefault(s => s.SuppCode == suppCode);
            var rowSupplier = row as Supplier;

            supplier.SuppName = rowSupplier.SuppName;
            supplier.Address = rowSupplier.Address;
            supplier.ContactPerson = rowSupplier.ContactPerson;
            supplier.ContactNo = rowSupplier.ContactNo;
            supplier.Email = rowSupplier.Email;
            supplier.Remark = rowSupplier.Remark;

            dbContext.SubmitChanges();
        }
        // Suppliers Tab Methods End

        // Purchase Tab Methods Start 

        private void LoadPurchasePage()
        {
            InitializePurchaseItemGridView();
            InitializeSupplierComboBox();
        }

        private void InitializePurchaseItemGridView()
        {
            purchaseItems = new DataTable();
            purchaseItems.Columns.Add("ProductCode", typeof(string));
            purchaseItems.Columns.Add("UnitPrice", typeof(decimal));
            purchaseItems.Columns.Add("Quantity", typeof(decimal));
            purchaseItems.Columns.Add("TotalPrice", typeof(decimal));
            gridControlPurchaseItems.DataSource = purchaseItems;
        }

        private void InitializeSupplierComboBox()
        {
            suppliersBindingSource.DataSource = new InventoryDataClassesDataContext().Suppliers;
            comboBoxPSupplier.DataSource = suppliersBindingSource;
            comboBoxPSupplier.DisplayMember = "SuppName";
            comboBoxPSupplier.ValueMember = "SuppId";
        }

        private void buttonAddPurchaseProduct_Click(object sender, EventArgs e)
        {
            string pName = textBoxPPName.Text;
            //int.TryParse(textBoxPPQuantity.Text, out int quantity);
            if (Decimal.TryParse(textBoxPPUPrice.Text, out decimal price) &
                int.TryParse(textBoxPPQuantity.Text, out int quantity))
            {

                DataRow dr = purchaseItems.NewRow();
                dr[0] = pName;
                dr[1] = price;
                dr[2] = quantity;
                dr[3] = price * quantity;
                purchaseItems.Rows.Add(dr);
                gridControlPurchaseItems.RefreshDataSource();
            }
            else
            {
                XtraMessageBox.Show("Qunatity should be number!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        }

        private void gridViewPurchaseItem_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            GridView view = sender as GridView;
            var row = view.GetRow(e.RowHandle);
            Decimal.TryParse(view.GetRowCellValue(e.RowHandle, "Quantity").ToString(), out decimal quantity);

            if (quantity >= 1)
            {
                string unitPrice = view.GetRowCellValue(e.RowHandle, "UnitPrice").ToString();
                decimal totalPricee = Convert.ToDecimal(quantity) * Convert.ToDecimal(unitPrice);

                view.SetRowCellValue(e.RowHandle, "TotalPrice", totalPricee);
            }
            else
            {
                e.Valid = false;
                e.ErrorText = "Quantity should be positive or at least 1";
            }
        }

        private void gridViewPurchaseItem_CustomDrawFooterCell(object sender, FooterCellCustomDrawEventArgs e)
        {
            GridSummaryItem summary = e.Info.SummaryItem;
            // Obtain the total summary's value. 
            double summaryValue = Convert.ToDouble(summary.SummaryValue);
            string summaryText = String.Format("{0:#.##}", summaryValue);
            textBoxPTotal.Text = summaryText;
            double due = summaryValue - Convert.ToDouble(textBoxPAmount.Text);
            textBoxPDue.Text = String.Format("{0:#.##}", due);
        }

        private void buttonPSubmit_Click(object sender, EventArgs e)
        {
            foreach (DataRow item in purchaseItems.Rows)
            {
                Console.WriteLine(item[1]);
            }
        }

        private void textBoxPAmount_TextChanged(object sender, EventArgs e)
        {
            decimal.TryParse(textBoxPTotal.Text, out decimal total);
            decimal.TryParse(textBoxPAmount.Text, out decimal amount);
            //decimal.TryParse(textBoxPDue.Text, out decimal due);
            textBoxPDue.Text = String.Format("{0:#.##}", (total - amount));
        }
        // Purchase Tab Method End

        // Barcode Print Tab Start
        private void LoadBarcodePage()
        {
            InitializeBarcodeCategoryComboBox();
        }
        private void InitializeBarcodeCategoryComboBox()
        {
            productCategoryBindingSource.DataSource = new InventoryDataClassesDataContext().SubCategories;
            comboBoxProductBarcodeCategory.DataSource = productCategoryBindingSource;
            comboBoxProductBarcodeCategory.DisplayMember = "Name";
            comboBoxProductBarcodeCategory.ValueMember = "Code";
        }
        private void buttonPrintBarcode_Click(object sender, EventArgs e)
        {
            string productCode = textBoxBPCode.Text;
            int.TryParse(textBoxBCNumber.Text, out int totalBarcode);
            if (productCode.Length == 8 && Regex.IsMatch(productCode, @"^\d+$"))
            {
                new ReportPrintTool(new BarcodePrint(productCode, totalBarcode)).ShowPreview();
            }
            else
            {
                XtraMessageBox.Show("Product code should be 8 character long!!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        private void comboBoxProductBarcodeCategory_SelectionChangeCommitted(object sender, EventArgs e)
        {
            textBoxBPCCode.Text = comboBoxProductBarcodeCategory.SelectedValue.ToString();
            textBoxBPCode.Text = textBoxBPCCode.Text + textBoxBCSuffix.Text;
        }
        private void textBoxBCSuffix_KeyUp(object sender, KeyEventArgs e)
        {
            textBoxBPCode.Text = textBoxBPCCode.Text + textBoxBCSuffix.Text;
        }
        // Barcode Print Tab End

        // Raw Material Tab Start
        private void LoadRawMaterialTabPage()
        {
            InitializeRawMaterialGridView();
        }
        private void InitializeRawMaterialGridView()
        {
            // This line of code is generated by Data Source Configuration Wizard
            rawProductsBindingSource.DataSource = new InventoryDataClassesDataContext().RawProducts;
            gridControlRawMaterial.RefreshDataSource();
        }
        private void buttonAddRawMaterial_Click(object sender, EventArgs e)
        {
            string materialCode = textBoxIRMCode.Text;
            string materialName = textBoxIRMName.Text;
            string materialDesc = textBoxIRMDesc.Text;
            string reorderPoint = textBoxIRMRPoint.Text;
            string materialStock = textBoxIRMStock.Text;

            dbContext.RawProducts.InsertOnSubmit(new RawProduct()
            {
                RPCode = materialCode,
                RPName = materialName,
                Description = materialDesc,
                ReOrderPoint = Convert.ToInt16(reorderPoint),
                Stock = Convert.ToInt32(materialStock),
                Active = true,
                Branch_BranchId = BRANCH_ID
            });
            dbContext.SubmitChanges();
            InitializeRawMaterialGridView();
        }

        private void buttonRMULoad_Click(object sender, EventArgs e)
        {
            string rawMaterialCode = textBoxRMUCode.Text;
            var rawMaterial = dbContext.RawProducts.SingleOrDefault(p => p.RPCode == rawMaterialCode);
            if (rawMaterial != null)
            {
                textBoxRMUName.Text = rawMaterial.RPName;
                textBoxRMUDesc.Text = rawMaterial.Description;
                textBoxRMURPoint.Text = rawMaterial.ReOrderPoint.ToString();
                textBoxRMUStock.Text = rawMaterial.Stock.ToString();
                checkBoxRMUActive.Checked = rawMaterial.Active;

                buttonRMU.Enabled = true;
            }
        }

        private void buttonRMU_Click(object sender, EventArgs e)
        {

            // TODO: Raw Material Input Validation
            string rawMaterialCode = textBoxRMUCode.Text;
            var rawMaterial = dbContext.RawProducts.SingleOrDefault(p => p.RPCode == rawMaterialCode);

            rawMaterial.RPName = textBoxRMUName.Text;
            rawMaterial.Description = textBoxRMUDesc.Text;
            rawMaterial.ReOrderPoint = Convert.ToInt16(textBoxRMURPoint.Text);
            rawMaterial.Stock = Convert.ToInt32(textBoxRMUStock.Text);
            rawMaterial.Active = checkBoxRMUActive.Checked;

            dbContext.SubmitChanges();
            InitializeRawMaterialGridView();
        }

        private void buttonRMUStockLoad_Click(object sender, EventArgs e)
        {
            string rawMaterialCode = textBoxRMSUCode.Text;
            var rawMaterial = dbContext.RawProducts.SingleOrDefault(p => p.RPCode == rawMaterialCode);
            if (rawMaterial != null)
            {
                textBoxRMSUCtock.Text = rawMaterial.Stock.ToString();

                buttonRMSUAddStock.Enabled = true;
            }
        }

        private void buttonRMSUAddStock_Click(object sender, EventArgs e)
        {
            string rawMaterialCode = textBoxRMSUCode.Text;
            var rawMaterial = dbContext.RawProducts.SingleOrDefault(p => p.RPCode == rawMaterialCode);
            rawMaterial.Stock = rawMaterial.Stock + Convert.ToInt32(textBoxRMSUAStock.Text);
            dbContext.SubmitChanges();
            InitializeRawMaterialGridView();
        }
        // Raw Material Tab Ends

        // Sale Tab Start

        private void LoadSaleTabPage()
        {
            InitializeInvoiceItemGridView();
        }

        private void InitializeInvoiceItemGridView()
        {
            invoiceItems = new DataTable();
            invoiceItems.Columns.Add("PProductId", typeof(string));
            invoiceItems.Columns.Add("PCode", typeof(string));
            invoiceItems.Columns.Add("PUPrice", typeof(decimal));
            invoiceItems.Columns.Add("PQuantity", typeof(decimal));
            invoiceItems.Columns.Add("PTotalPrice", typeof(decimal));
            gridControlSaleProducts.DataSource = invoiceItems;
        }

        private void buttonAddInvoiceItem_Click(object sender, EventArgs e)
        {
            string prodCode = comboBoxIProducts.SelectedValue.ToString();
            var product = dbContext.Products.SingleOrDefault(p => p.ProdCode == prodCode);
            if (int.TryParse(textBoxIQuantity.Text, out int quantity))
            {

                DataRow dr = invoiceItems.NewRow();
                dr[0] = product.ProdId;
                dr[1] = prodCode;
                dr[2] = product.SellingPrice;
                dr[3] = quantity;
                dr[4] = product.SellingPrice * quantity;
                invoiceItems.Rows.Add(dr);
                gridControlSaleProducts.RefreshDataSource();
            }
            else
            {
                XtraMessageBox.Show("Qunatity should be number!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void gridViewSaleProducts_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            GridView view = sender as GridView;
            var row = view.GetRow(e.RowHandle);
            Decimal.TryParse(view.GetRowCellValue(e.RowHandle, "PQuantity").ToString(), out decimal quantity);

            if (quantity >= 1)
            {
                string unitPrice = view.GetRowCellValue(e.RowHandle, "PUPrice").ToString();
                decimal totalPricee = Convert.ToDecimal(quantity) * Convert.ToDecimal(unitPrice);

                view.SetRowCellValue(e.RowHandle, "PTotalPrice", totalPricee);
            }
            else
            {
                e.Valid = false;
                e.ErrorText = "Quantity should be positive or at least 1";
            }
        }

        private void gridViewSaleProducts_CustomDrawFooterCell(object sender, FooterCellCustomDrawEventArgs e)
        {
            GridSummaryItem summary = e.Info.SummaryItem;
            // Obtain the total summary's value. 
            double summaryValue = Convert.ToDouble(summary.SummaryValue);
            string summaryText = String.Format("{0:#.##}", summaryValue);
            textBoxITotal.Text = summaryText;
            double due = summaryValue - Convert.ToDouble(textBoxIAmount.Text);
            textBoxIDue.Text = String.Format("{0:#.##}", due);
        }

        private void tabPageWorks_Click(object sender, EventArgs e)
        {

        }



        // Sale Tab Ends
    }
}
