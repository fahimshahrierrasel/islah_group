#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IslahGroupInventory
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="IslahFactoryInventory")]
	public partial class InventoryDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBranch(Branch instance);
    partial void UpdateBranch(Branch instance);
    partial void DeleteBranch(Branch instance);
    partial void InsertVoucherItem(VoucherItem instance);
    partial void UpdateVoucherItem(VoucherItem instance);
    partial void DeleteVoucherItem(VoucherItem instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertIGUser(IGUser instance);
    partial void UpdateIGUser(IGUser instance);
    partial void DeleteIGUser(IGUser instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertInvoiceItem(InvoiceItem instance);
    partial void UpdateInvoiceItem(InvoiceItem instance);
    partial void DeleteInvoiceItem(InvoiceItem instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertPaymentType(PaymentType instance);
    partial void UpdatePaymentType(PaymentType instance);
    partial void DeletePaymentType(PaymentType instance);
    partial void InsertProcessing(Processing instance);
    partial void UpdateProcessing(Processing instance);
    partial void DeleteProcessing(Processing instance);
    partial void InsertProcessingItem(ProcessingItem instance);
    partial void UpdateProcessingItem(ProcessingItem instance);
    partial void DeleteProcessingItem(ProcessingItem instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertPurchase(Purchase instance);
    partial void UpdatePurchase(Purchase instance);
    partial void DeletePurchase(Purchase instance);
    partial void InsertPurchaseItem(PurchaseItem instance);
    partial void UpdatePurchaseItem(PurchaseItem instance);
    partial void DeletePurchaseItem(PurchaseItem instance);
    partial void InsertRawProduct(RawProduct instance);
    partial void UpdateRawProduct(RawProduct instance);
    partial void DeleteRawProduct(RawProduct instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertServiceItem(ServiceItem instance);
    partial void UpdateServiceItem(ServiceItem instance);
    partial void DeleteServiceItem(ServiceItem instance);
    partial void InsertServiceType(ServiceType instance);
    partial void UpdateServiceType(ServiceType instance);
    partial void DeleteServiceType(ServiceType instance);
    partial void InsertSubCategory(SubCategory instance);
    partial void UpdateSubCategory(SubCategory instance);
    partial void DeleteSubCategory(SubCategory instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    partial void InsertVoucher(Voucher instance);
    partial void UpdateVoucher(Voucher instance);
    partial void DeleteVoucher(Voucher instance);
    #endregion
		
		public InventoryDataClassesDataContext() : 
				base(global::IslahGroupInventory.Properties.Settings.Default.IslahFactoryInventoryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Branch> Branches
		{
			get
			{
				return this.GetTable<Branch>();
			}
		}
		
		public System.Data.Linq.Table<VoucherItem> VoucherItems
		{
			get
			{
				return this.GetTable<VoucherItem>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<IGUser> IGUsers
		{
			get
			{
				return this.GetTable<IGUser>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceItem> InvoiceItems
		{
			get
			{
				return this.GetTable<InvoiceItem>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<PaymentType> PaymentTypes
		{
			get
			{
				return this.GetTable<PaymentType>();
			}
		}
		
		public System.Data.Linq.Table<Processing> Processings
		{
			get
			{
				return this.GetTable<Processing>();
			}
		}
		
		public System.Data.Linq.Table<ProcessingItem> ProcessingItems
		{
			get
			{
				return this.GetTable<ProcessingItem>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Purchase> Purchases
		{
			get
			{
				return this.GetTable<Purchase>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseItem> PurchaseItems
		{
			get
			{
				return this.GetTable<PurchaseItem>();
			}
		}
		
		public System.Data.Linq.Table<RawProduct> RawProducts
		{
			get
			{
				return this.GetTable<RawProduct>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<ServiceItem> ServiceItems
		{
			get
			{
				return this.GetTable<ServiceItem>();
			}
		}
		
		public System.Data.Linq.Table<ServiceType> ServiceTypes
		{
			get
			{
				return this.GetTable<ServiceType>();
			}
		}
		
		public System.Data.Linq.Table<SubCategory> SubCategories
		{
			get
			{
				return this.GetTable<SubCategory>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
		
		public System.Data.Linq.Table<Voucher> Vouchers
		{
			get
			{
				return this.GetTable<Voucher>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNextCustomerCode")]
		public int GetNextCustomerCode()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNextBranchCode")]
		public int GetNextBranchCode()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNextVoucherCode")]
		public int GetNextVoucherCode()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNextInvoiceCode")]
		public int GetNextInvoiceCode()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNextPurchaseCode")]
		public int GetNextPurchaseCode()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNextRawProductCode")]
		public int GetNextRawProductCode()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNextServiceCode")]
		public int GetNextServiceCode()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNextSupplierCode")]
		public int GetNextSupplierCode()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetNextProductCode")]
		public int GetNextProductCode()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Branch")]
	public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BranchId;
		
		private string _BranchCode;
		
		private string _BranchName;
		
		private string _Address;
		
		private string _ContactPerson;
		
		private string _ContactNo;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<IGUser> _IGUsers;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<Log> _Logs;
		
		private EntitySet<Processing> _Processings;
		
		private EntitySet<Product> _Products;
		
		private EntitySet<Purchase> _Purchases;
		
		private EntitySet<RawProduct> _RawProducts;
		
		private EntitySet<Service> _Services;
		
		private EntitySet<Supplier> _Suppliers;
		
		private EntitySet<Voucher> _Vouchers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranchIdChanging(int value);
    partial void OnBranchIdChanged();
    partial void OnBranchCodeChanging(string value);
    partial void OnBranchCodeChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContactPersonChanging(string value);
    partial void OnContactPersonChanged();
    partial void OnContactNoChanging(string value);
    partial void OnContactNoChanged();
    #endregion
		
		public Branch()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._IGUsers = new EntitySet<IGUser>(new Action<IGUser>(this.attach_IGUsers), new Action<IGUser>(this.detach_IGUsers));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Processings = new EntitySet<Processing>(new Action<Processing>(this.attach_Processings), new Action<Processing>(this.detach_Processings));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Purchases = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchases), new Action<Purchase>(this.detach_Purchases));
			this._RawProducts = new EntitySet<RawProduct>(new Action<RawProduct>(this.attach_RawProducts), new Action<RawProduct>(this.detach_RawProducts));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			this._Vouchers = new EntitySet<Voucher>(new Action<Voucher>(this.attach_Vouchers), new Action<Voucher>(this.detach_Vouchers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string BranchCode
		{
			get
			{
				return this._BranchCode;
			}
			set
			{
				if ((this._BranchCode != value))
				{
					this.OnBranchCodeChanging(value);
					this.SendPropertyChanging();
					this._BranchCode = value;
					this.SendPropertyChanged("BranchCode");
					this.OnBranchCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string BranchName
		{
			get
			{
				return this._BranchName;
			}
			set
			{
				if ((this._BranchName != value))
				{
					this.OnBranchNameChanging(value);
					this.SendPropertyChanging();
					this._BranchName = value;
					this.SendPropertyChanged("BranchName");
					this.OnBranchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPerson", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactPerson
		{
			get
			{
				return this._ContactPerson;
			}
			set
			{
				if ((this._ContactPerson != value))
				{
					this.OnContactPersonChanging(value);
					this.SendPropertyChanging();
					this._ContactPerson = value;
					this.SendPropertyChanged("ContactPerson");
					this.OnContactPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Customer", Storage="_Customers", ThisKey="BranchId", OtherKey="Branch_BranchId")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_IGUser", Storage="_IGUsers", ThisKey="BranchId", OtherKey="Branch_BranchId")]
		public EntitySet<IGUser> IGUsers
		{
			get
			{
				return this._IGUsers;
			}
			set
			{
				this._IGUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Invoice", Storage="_Invoices", ThisKey="BranchId", OtherKey="Branch_BranchId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Log", Storage="_Logs", ThisKey="BranchId", OtherKey="Branch_BranchId")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Processing", Storage="_Processings", ThisKey="BranchId", OtherKey="Branch_BranchId")]
		public EntitySet<Processing> Processings
		{
			get
			{
				return this._Processings;
			}
			set
			{
				this._Processings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Product", Storage="_Products", ThisKey="BranchId", OtherKey="Branch_BranchId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Purchase", Storage="_Purchases", ThisKey="BranchId", OtherKey="Branch_BranchId")]
		public EntitySet<Purchase> Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				this._Purchases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_RawProduct", Storage="_RawProducts", ThisKey="BranchId", OtherKey="Branch_BranchId")]
		public EntitySet<RawProduct> RawProducts
		{
			get
			{
				return this._RawProducts;
			}
			set
			{
				this._RawProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Service", Storage="_Services", ThisKey="BranchId", OtherKey="Branch_BranchId")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Supplier", Storage="_Suppliers", ThisKey="BranchId", OtherKey="Branch_BranchId")]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Voucher", Storage="_Vouchers", ThisKey="BranchId", OtherKey="Branch_BranchId")]
		public EntitySet<Voucher> Vouchers
		{
			get
			{
				return this._Vouchers;
			}
			set
			{
				this._Vouchers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_IGUsers(IGUser entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_IGUsers(IGUser entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_Processings(Processing entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Processings(Processing entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_RawProducts(RawProduct entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_RawProducts(RawProduct entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
		
		private void attach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VoucherItem")]
	public partial class VoucherItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VIIid;
		
		private string _ItemName;
		
		private string _Details;
		
		private decimal _Amount;
		
		private long _Voucher_VoucId;
		
		private EntityRef<Voucher> _Voucher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVIIidChanging(int value);
    partial void OnVIIidChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnVoucher_VoucIdChanging(long value);
    partial void OnVoucher_VoucIdChanged();
    #endregion
		
		public VoucherItem()
		{
			this._Voucher = default(EntityRef<Voucher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIIid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VIIid
		{
			get
			{
				return this._VIIid;
			}
			set
			{
				if ((this._VIIid != value))
				{
					this.OnVIIidChanging(value);
					this.SendPropertyChanging();
					this._VIIid = value;
					this.SendPropertyChanged("VIIid");
					this.OnVIIidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="VarChar(MAX)")]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Voucher_VoucId", DbType="BigInt NOT NULL")]
		public long Voucher_VoucId
		{
			get
			{
				return this._Voucher_VoucId;
			}
			set
			{
				if ((this._Voucher_VoucId != value))
				{
					if (this._Voucher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoucher_VoucIdChanging(value);
					this.SendPropertyChanging();
					this._Voucher_VoucId = value;
					this.SendPropertyChanged("Voucher_VoucId");
					this.OnVoucher_VoucIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_VoucherItem", Storage="_Voucher", ThisKey="Voucher_VoucId", OtherKey="VoucId", IsForeignKey=true)]
		public Voucher Voucher
		{
			get
			{
				return this._Voucher.Entity;
			}
			set
			{
				Voucher previousValue = this._Voucher.Entity;
				if (((previousValue != value) 
							|| (this._Voucher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voucher.Entity = null;
						previousValue.VoucherItems.Remove(this);
					}
					this._Voucher.Entity = value;
					if ((value != null))
					{
						value.VoucherItems.Add(this);
						this._Voucher_VoucId = value.VoucId;
					}
					else
					{
						this._Voucher_VoucId = default(long);
					}
					this.SendPropertyChanged("Voucher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private EntitySet<SubCategory> _SubCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Category()
		{
			this._SubCategories = new EntitySet<SubCategory>(new Action<SubCategory>(this.attach_SubCategories), new Action<SubCategory>(this.detach_SubCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_SubCategory", Storage="_SubCategories", ThisKey="Name", OtherKey="Category_Name")]
		public EntitySet<SubCategory> SubCategories
		{
			get
			{
				return this._SubCategories;
			}
			set
			{
				this._SubCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustId;
		
		private string _CustCode;
		
		private string _CustName;
		
		private string _Address;
		
		private string _ContactNo;
		
		private string _Email;
		
		private string _Remark;
		
		private int _Branch_BranchId;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<Service> _Services;
		
		private EntityRef<Branch> _Branch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustIdChanging(int value);
    partial void OnCustIdChanged();
    partial void OnCustCodeChanging(string value);
    partial void OnCustCodeChanged();
    partial void OnCustNameChanging(string value);
    partial void OnCustNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContactNoChanging(string value);
    partial void OnContactNoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnBranch_BranchIdChanging(int value);
    partial void OnBranch_BranchIdChanged();
    #endregion
		
		public Customer()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._Branch = default(EntityRef<Branch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustId
		{
			get
			{
				return this._CustId;
			}
			set
			{
				if ((this._CustId != value))
				{
					this.OnCustIdChanging(value);
					this.SendPropertyChanging();
					this._CustId = value;
					this.SendPropertyChanged("CustId");
					this.OnCustIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string CustCode
		{
			get
			{
				return this._CustCode;
			}
			set
			{
				if ((this._CustCode != value))
				{
					this.OnCustCodeChanging(value);
					this.SendPropertyChanging();
					this._CustCode = value;
					this.SendPropertyChanged("CustCode");
					this.OnCustCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CustName
		{
			get
			{
				return this._CustName;
			}
			set
			{
				if ((this._CustName != value))
				{
					this.OnCustNameChanging(value);
					this.SendPropertyChanging();
					this._CustName = value;
					this.SendPropertyChanged("CustName");
					this.OnCustNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="VarChar(MAX)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_BranchId", DbType="Int NOT NULL")]
		public int Branch_BranchId
		{
			get
			{
				return this._Branch_BranchId;
			}
			set
			{
				if ((this._Branch_BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_BranchIdChanging(value);
					this.SendPropertyChanging();
					this._Branch_BranchId = value;
					this.SendPropertyChanged("Branch_BranchId");
					this.OnBranch_BranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Invoice", Storage="_Invoices", ThisKey="CustId", OtherKey="Customer_CustId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Service", Storage="_Services", ThisKey="CustId", OtherKey="Customer_CustId")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Customer", Storage="_Branch", ThisKey="Branch_BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._Branch_BranchId = value.BranchId;
					}
					else
					{
						this._Branch_BranchId = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IGUser")]
	public partial class IGUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _AName;
		
		private string _Email;
		
		private string _AUsername;
		
		private string _APassword;
		
		private string _Status;
		
		private string _UserType_UsrType;
		
		private int _Branch_BranchId;
		
		private EntitySet<Log> _Logs;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnANameChanging(string value);
    partial void OnANameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAUsernameChanging(string value);
    partial void OnAUsernameChanged();
    partial void OnAPasswordChanging(string value);
    partial void OnAPasswordChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnUserType_UsrTypeChanging(string value);
    partial void OnUserType_UsrTypeChanged();
    partial void OnBranch_BranchIdChanging(int value);
    partial void OnBranch_BranchIdChanged();
    #endregion
		
		public IGUser()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Branch = default(EntityRef<Branch>);
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AName", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string AName
		{
			get
			{
				return this._AName;
			}
			set
			{
				if ((this._AName != value))
				{
					this.OnANameChanging(value);
					this.SendPropertyChanging();
					this._AName = value;
					this.SendPropertyChanged("AName");
					this.OnANameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AUsername", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string AUsername
		{
			get
			{
				return this._AUsername;
			}
			set
			{
				if ((this._AUsername != value))
				{
					this.OnAUsernameChanging(value);
					this.SendPropertyChanging();
					this._AUsername = value;
					this.SendPropertyChanged("AUsername");
					this.OnAUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_APassword", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string APassword
		{
			get
			{
				return this._APassword;
			}
			set
			{
				if ((this._APassword != value))
				{
					this.OnAPasswordChanging(value);
					this.SendPropertyChanging();
					this._APassword = value;
					this.SendPropertyChanged("APassword");
					this.OnAPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType_UsrType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string UserType_UsrType
		{
			get
			{
				return this._UserType_UsrType;
			}
			set
			{
				if ((this._UserType_UsrType != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserType_UsrTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType_UsrType = value;
					this.SendPropertyChanged("UserType_UsrType");
					this.OnUserType_UsrTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_BranchId", DbType="Int NOT NULL")]
		public int Branch_BranchId
		{
			get
			{
				return this._Branch_BranchId;
			}
			set
			{
				if ((this._Branch_BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_BranchIdChanging(value);
					this.SendPropertyChanging();
					this._Branch_BranchId = value;
					this.SendPropertyChanged("Branch_BranchId");
					this.OnBranch_BranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IGUser_Log", Storage="_Logs", ThisKey="UserId", OtherKey="IGUser_UserId")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_IGUser", Storage="_Branch", ThisKey="Branch_BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.IGUsers.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.IGUsers.Add(this);
						this._Branch_BranchId = value.BranchId;
					}
					else
					{
						this._Branch_BranchId = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_IGUser", Storage="_UserType", ThisKey="UserType_UsrType", OtherKey="UsrType", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.IGUsers.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.IGUsers.Add(this);
						this._UserType_UsrType = value.UsrType;
					}
					else
					{
						this._UserType_UsrType = default(string);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.IGUser = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.IGUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _InvcId;
		
		private string _InvcCode;
		
		private System.DateTime _InvcDate;
		
		private System.DateTime _PaymentDate;
		
		private decimal _Amount;
		
		private decimal _Due;
		
		private int _Customer_CustId;
		
		private string _PaymentType_PType;
		
		private int _Branch_BranchId;
		
		private EntitySet<InvoiceItem> _InvoiceItems;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<PaymentType> _PaymentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvcIdChanging(long value);
    partial void OnInvcIdChanged();
    partial void OnInvcCodeChanging(string value);
    partial void OnInvcCodeChanged();
    partial void OnInvcDateChanging(System.DateTime value);
    partial void OnInvcDateChanged();
    partial void OnPaymentDateChanging(System.DateTime value);
    partial void OnPaymentDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnDueChanging(decimal value);
    partial void OnDueChanged();
    partial void OnCustomer_CustIdChanging(int value);
    partial void OnCustomer_CustIdChanged();
    partial void OnPaymentType_PTypeChanging(string value);
    partial void OnPaymentType_PTypeChanged();
    partial void OnBranch_BranchIdChanging(int value);
    partial void OnBranch_BranchIdChanged();
    #endregion
		
		public Invoice()
		{
			this._InvoiceItems = new EntitySet<InvoiceItem>(new Action<InvoiceItem>(this.attach_InvoiceItems), new Action<InvoiceItem>(this.detach_InvoiceItems));
			this._Branch = default(EntityRef<Branch>);
			this._Customer = default(EntityRef<Customer>);
			this._PaymentType = default(EntityRef<PaymentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvcId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long InvcId
		{
			get
			{
				return this._InvcId;
			}
			set
			{
				if ((this._InvcId != value))
				{
					this.OnInvcIdChanging(value);
					this.SendPropertyChanging();
					this._InvcId = value;
					this.SendPropertyChanged("InvcId");
					this.OnInvcIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvcCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string InvcCode
		{
			get
			{
				return this._InvcCode;
			}
			set
			{
				if ((this._InvcCode != value))
				{
					this.OnInvcCodeChanging(value);
					this.SendPropertyChanging();
					this._InvcCode = value;
					this.SendPropertyChanged("InvcCode");
					this.OnInvcCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvcDate", DbType="DateTime NOT NULL")]
		public System.DateTime InvcDate
		{
			get
			{
				return this._InvcDate;
			}
			set
			{
				if ((this._InvcDate != value))
				{
					this.OnInvcDateChanging(value);
					this.SendPropertyChanging();
					this._InvcDate = value;
					this.SendPropertyChanged("InvcDate");
					this.OnInvcDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="DateTime NOT NULL")]
		public System.DateTime PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Due", DbType="Money NOT NULL")]
		public decimal Due
		{
			get
			{
				return this._Due;
			}
			set
			{
				if ((this._Due != value))
				{
					this.OnDueChanging(value);
					this.SendPropertyChanging();
					this._Due = value;
					this.SendPropertyChanged("Due");
					this.OnDueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_CustId", DbType="Int NOT NULL")]
		public int Customer_CustId
		{
			get
			{
				return this._Customer_CustId;
			}
			set
			{
				if ((this._Customer_CustId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_CustIdChanging(value);
					this.SendPropertyChanging();
					this._Customer_CustId = value;
					this.SendPropertyChanged("Customer_CustId");
					this.OnCustomer_CustIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentType_PType", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string PaymentType_PType
		{
			get
			{
				return this._PaymentType_PType;
			}
			set
			{
				if ((this._PaymentType_PType != value))
				{
					if (this._PaymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentType_PTypeChanging(value);
					this.SendPropertyChanging();
					this._PaymentType_PType = value;
					this.SendPropertyChanged("PaymentType_PType");
					this.OnPaymentType_PTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_BranchId", DbType="Int NOT NULL")]
		public int Branch_BranchId
		{
			get
			{
				return this._Branch_BranchId;
			}
			set
			{
				if ((this._Branch_BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_BranchIdChanging(value);
					this.SendPropertyChanging();
					this._Branch_BranchId = value;
					this.SendPropertyChanged("Branch_BranchId");
					this.OnBranch_BranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceItem", Storage="_InvoiceItems", ThisKey="InvcId", OtherKey="Invoice_InvcId")]
		public EntitySet<InvoiceItem> InvoiceItems
		{
			get
			{
				return this._InvoiceItems;
			}
			set
			{
				this._InvoiceItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Invoice", Storage="_Branch", ThisKey="Branch_BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._Branch_BranchId = value.BranchId;
					}
					else
					{
						this._Branch_BranchId = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Invoice", Storage="_Customer", ThisKey="Customer_CustId", OtherKey="CustId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._Customer_CustId = value.CustId;
					}
					else
					{
						this._Customer_CustId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Invoice", Storage="_PaymentType", ThisKey="PaymentType_PType", OtherKey="PType", IsForeignKey=true)]
		public PaymentType PaymentType
		{
			get
			{
				return this._PaymentType.Entity;
			}
			set
			{
				PaymentType previousValue = this._PaymentType.Entity;
				if (((previousValue != value) 
							|| (this._PaymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentType.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._PaymentType.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._PaymentType_PType = value.PType;
					}
					else
					{
						this._PaymentType_PType = default(string);
					}
					this.SendPropertyChanged("PaymentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceItems(InvoiceItem entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_InvoiceItems(InvoiceItem entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceItem")]
	public partial class InvoiceItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Invoice_InvcId;
		
		private int _Product_ProdId;
		
		private decimal _Quantity;
		
		private int _Price;
		
		private EntityRef<Invoice> _Invoice;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoice_InvcIdChanging(long value);
    partial void OnInvoice_InvcIdChanged();
    partial void OnProduct_ProdIdChanging(int value);
    partial void OnProduct_ProdIdChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    #endregion
		
		public InvoiceItem()
		{
			this._Invoice = default(EntityRef<Invoice>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invoice_InvcId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Invoice_InvcId
		{
			get
			{
				return this._Invoice_InvcId;
			}
			set
			{
				if ((this._Invoice_InvcId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoice_InvcIdChanging(value);
					this.SendPropertyChanging();
					this._Invoice_InvcId = value;
					this.SendPropertyChanged("Invoice_InvcId");
					this.OnInvoice_InvcIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ProdId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Product_ProdId
		{
			get
			{
				return this._Product_ProdId;
			}
			set
			{
				if ((this._Product_ProdId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_ProdIdChanging(value);
					this.SendPropertyChanging();
					this._Product_ProdId = value;
					this.SendPropertyChanged("Product_ProdId");
					this.OnProduct_ProdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(10,2) NOT NULL")]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceItem", Storage="_Invoice", ThisKey="Invoice_InvcId", OtherKey="InvcId", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.InvoiceItems.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.InvoiceItems.Add(this);
						this._Invoice_InvcId = value.InvcId;
					}
					else
					{
						this._Invoice_InvcId = default(long);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_InvoiceItem", Storage="_Product", ThisKey="Product_ProdId", OtherKey="ProdId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.InvoiceItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.InvoiceItems.Add(this);
						this._Product_ProdId = value.ProdId;
					}
					else
					{
						this._Product_ProdId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Log]")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _LogId;
		
		private string _LogText;
		
		private string _LogType;
		
		private System.DateTime _LogTime;
		
		private int _IGUser_UserId;
		
		private int _Branch_BranchId;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<IGUser> _IGUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIdChanging(long value);
    partial void OnLogIdChanged();
    partial void OnLogTextChanging(string value);
    partial void OnLogTextChanged();
    partial void OnLogTypeChanging(string value);
    partial void OnLogTypeChanged();
    partial void OnLogTimeChanging(System.DateTime value);
    partial void OnLogTimeChanged();
    partial void OnIGUser_UserIdChanging(int value);
    partial void OnIGUser_UserIdChanged();
    partial void OnBranch_BranchIdChanging(int value);
    partial void OnBranch_BranchIdChanged();
    #endregion
		
		public Log()
		{
			this._Branch = default(EntityRef<Branch>);
			this._IGUser = default(EntityRef<IGUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this.OnLogIdChanging(value);
					this.SendPropertyChanging();
					this._LogId = value;
					this.SendPropertyChanged("LogId");
					this.OnLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LogText
		{
			get
			{
				return this._LogText;
			}
			set
			{
				if ((this._LogText != value))
				{
					this.OnLogTextChanging(value);
					this.SendPropertyChanging();
					this._LogText = value;
					this.SendPropertyChanged("LogText");
					this.OnLogTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LogType
		{
			get
			{
				return this._LogType;
			}
			set
			{
				if ((this._LogType != value))
				{
					this.OnLogTypeChanging(value);
					this.SendPropertyChanging();
					this._LogType = value;
					this.SendPropertyChanged("LogType");
					this.OnLogTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogTime", DbType="DateTime NOT NULL")]
		public System.DateTime LogTime
		{
			get
			{
				return this._LogTime;
			}
			set
			{
				if ((this._LogTime != value))
				{
					this.OnLogTimeChanging(value);
					this.SendPropertyChanging();
					this._LogTime = value;
					this.SendPropertyChanged("LogTime");
					this.OnLogTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IGUser_UserId", DbType="Int NOT NULL")]
		public int IGUser_UserId
		{
			get
			{
				return this._IGUser_UserId;
			}
			set
			{
				if ((this._IGUser_UserId != value))
				{
					if (this._IGUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIGUser_UserIdChanging(value);
					this.SendPropertyChanging();
					this._IGUser_UserId = value;
					this.SendPropertyChanged("IGUser_UserId");
					this.OnIGUser_UserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_BranchId", DbType="Int NOT NULL")]
		public int Branch_BranchId
		{
			get
			{
				return this._Branch_BranchId;
			}
			set
			{
				if ((this._Branch_BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_BranchIdChanging(value);
					this.SendPropertyChanging();
					this._Branch_BranchId = value;
					this.SendPropertyChanged("Branch_BranchId");
					this.OnBranch_BranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Log", Storage="_Branch", ThisKey="Branch_BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._Branch_BranchId = value.BranchId;
					}
					else
					{
						this._Branch_BranchId = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IGUser_Log", Storage="_IGUser", ThisKey="IGUser_UserId", OtherKey="UserId", IsForeignKey=true)]
		public IGUser IGUser
		{
			get
			{
				return this._IGUser.Entity;
			}
			set
			{
				IGUser previousValue = this._IGUser.Entity;
				if (((previousValue != value) 
							|| (this._IGUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IGUser.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._IGUser.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._IGUser_UserId = value.UserId;
					}
					else
					{
						this._IGUser_UserId = default(int);
					}
					this.SendPropertyChanged("IGUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentType")]
	public partial class PaymentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PType;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<Purchase> _Purchases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPTypeChanging(string value);
    partial void OnPTypeChanged();
    #endregion
		
		public PaymentType()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Purchases = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchases), new Action<Purchase>(this.detach_Purchases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PType", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PType
		{
			get
			{
				return this._PType;
			}
			set
			{
				if ((this._PType != value))
				{
					this.OnPTypeChanging(value);
					this.SendPropertyChanging();
					this._PType = value;
					this.SendPropertyChanged("PType");
					this.OnPTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Invoice", Storage="_Invoices", ThisKey="PType", OtherKey="PaymentType_PType")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Purchase", Storage="_Purchases", ThisKey="PType", OtherKey="PaymentType_PType")]
		public EntitySet<Purchase> Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				this._Purchases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = null;
		}
		
		private void attach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = this;
		}
		
		private void detach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Processing")]
	public partial class Processing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProcessingID;
		
		private string _Description;
		
		private System.DateTime _Date;
		
		private int _Branch_BranchId;
		
		private EntitySet<ProcessingItem> _ProcessingItems;
		
		private EntityRef<Branch> _Branch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProcessingIDChanging(int value);
    partial void OnProcessingIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnBranch_BranchIdChanging(int value);
    partial void OnBranch_BranchIdChanged();
    #endregion
		
		public Processing()
		{
			this._ProcessingItems = new EntitySet<ProcessingItem>(new Action<ProcessingItem>(this.attach_ProcessingItems), new Action<ProcessingItem>(this.detach_ProcessingItems));
			this._Branch = default(EntityRef<Branch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProcessingID
		{
			get
			{
				return this._ProcessingID;
			}
			set
			{
				if ((this._ProcessingID != value))
				{
					this.OnProcessingIDChanging(value);
					this.SendPropertyChanging();
					this._ProcessingID = value;
					this.SendPropertyChanged("ProcessingID");
					this.OnProcessingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_BranchId", DbType="Int NOT NULL")]
		public int Branch_BranchId
		{
			get
			{
				return this._Branch_BranchId;
			}
			set
			{
				if ((this._Branch_BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_BranchIdChanging(value);
					this.SendPropertyChanging();
					this._Branch_BranchId = value;
					this.SendPropertyChanged("Branch_BranchId");
					this.OnBranch_BranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Processing_ProcessingItem", Storage="_ProcessingItems", ThisKey="ProcessingID", OtherKey="Processing_ProcessingID")]
		public EntitySet<ProcessingItem> ProcessingItems
		{
			get
			{
				return this._ProcessingItems;
			}
			set
			{
				this._ProcessingItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Processing", Storage="_Branch", ThisKey="Branch_BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Processings.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Processings.Add(this);
						this._Branch_BranchId = value.BranchId;
					}
					else
					{
						this._Branch_BranchId = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProcessingItems(ProcessingItem entity)
		{
			this.SendPropertyChanging();
			entity.Processing = this;
		}
		
		private void detach_ProcessingItems(ProcessingItem entity)
		{
			this.SendPropertyChanging();
			entity.Processing = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProcessingItem")]
	public partial class ProcessingItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Processing_ProcessingID;
		
		private int _RawProduct_RPId;
		
		private int _Quantity;
		
		private EntityRef<Processing> _Processing;
		
		private EntityRef<RawProduct> _RawProduct;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProcessing_ProcessingIDChanging(int value);
    partial void OnProcessing_ProcessingIDChanged();
    partial void OnRawProduct_RPIdChanging(int value);
    partial void OnRawProduct_RPIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public ProcessingItem()
		{
			this._Processing = default(EntityRef<Processing>);
			this._RawProduct = default(EntityRef<RawProduct>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Processing_ProcessingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Processing_ProcessingID
		{
			get
			{
				return this._Processing_ProcessingID;
			}
			set
			{
				if ((this._Processing_ProcessingID != value))
				{
					if (this._Processing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcessing_ProcessingIDChanging(value);
					this.SendPropertyChanging();
					this._Processing_ProcessingID = value;
					this.SendPropertyChanged("Processing_ProcessingID");
					this.OnProcessing_ProcessingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawProduct_RPId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RawProduct_RPId
		{
			get
			{
				return this._RawProduct_RPId;
			}
			set
			{
				if ((this._RawProduct_RPId != value))
				{
					if (this._RawProduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRawProduct_RPIdChanging(value);
					this.SendPropertyChanging();
					this._RawProduct_RPId = value;
					this.SendPropertyChanged("RawProduct_RPId");
					this.OnRawProduct_RPIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Processing_ProcessingItem", Storage="_Processing", ThisKey="Processing_ProcessingID", OtherKey="ProcessingID", IsForeignKey=true)]
		public Processing Processing
		{
			get
			{
				return this._Processing.Entity;
			}
			set
			{
				Processing previousValue = this._Processing.Entity;
				if (((previousValue != value) 
							|| (this._Processing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Processing.Entity = null;
						previousValue.ProcessingItems.Remove(this);
					}
					this._Processing.Entity = value;
					if ((value != null))
					{
						value.ProcessingItems.Add(this);
						this._Processing_ProcessingID = value.ProcessingID;
					}
					else
					{
						this._Processing_ProcessingID = default(int);
					}
					this.SendPropertyChanged("Processing");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RawProduct_ProcessingItem", Storage="_RawProduct", ThisKey="RawProduct_RPId", OtherKey="RPId", IsForeignKey=true)]
		public RawProduct RawProduct
		{
			get
			{
				return this._RawProduct.Entity;
			}
			set
			{
				RawProduct previousValue = this._RawProduct.Entity;
				if (((previousValue != value) 
							|| (this._RawProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RawProduct.Entity = null;
						previousValue.ProcessingItems.Remove(this);
					}
					this._RawProduct.Entity = value;
					if ((value != null))
					{
						value.ProcessingItems.Add(this);
						this._RawProduct_RPId = value.RPId;
					}
					else
					{
						this._RawProduct_RPId = default(int);
					}
					this.SendPropertyChanged("RawProduct");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProdId;
		
		private string _ProdCode;
		
		private string _ProdName;
		
		private string _Description;
		
		private bool _Active;
		
		private decimal _SellingPrice;
		
		private short _ReOrderPoint;
		
		private decimal _Discount;
		
		private int _Stock;
		
		private string _SubCategory_Name;
		
		private int _Branch_BranchId;
		
		private EntitySet<InvoiceItem> _InvoiceItems;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<SubCategory> _SubCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProdIdChanging(int value);
    partial void OnProdIdChanged();
    partial void OnProdCodeChanging(string value);
    partial void OnProdCodeChanged();
    partial void OnProdNameChanging(string value);
    partial void OnProdNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnSellingPriceChanging(decimal value);
    partial void OnSellingPriceChanged();
    partial void OnReOrderPointChanging(short value);
    partial void OnReOrderPointChanged();
    partial void OnDiscountChanging(decimal value);
    partial void OnDiscountChanged();
    partial void OnStockChanging(int value);
    partial void OnStockChanged();
    partial void OnSubCategory_NameChanging(string value);
    partial void OnSubCategory_NameChanged();
    partial void OnBranch_BranchIdChanging(int value);
    partial void OnBranch_BranchIdChanged();
    #endregion
		
		public Product()
		{
			this._InvoiceItems = new EntitySet<InvoiceItem>(new Action<InvoiceItem>(this.attach_InvoiceItems), new Action<InvoiceItem>(this.detach_InvoiceItems));
			this._Branch = default(EntityRef<Branch>);
			this._SubCategory = default(EntityRef<SubCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProdId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProdId
		{
			get
			{
				return this._ProdId;
			}
			set
			{
				if ((this._ProdId != value))
				{
					this.OnProdIdChanging(value);
					this.SendPropertyChanging();
					this._ProdId = value;
					this.SendPropertyChanged("ProdId");
					this.OnProdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProdCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ProdCode
		{
			get
			{
				return this._ProdCode;
			}
			set
			{
				if ((this._ProdCode != value))
				{
					this.OnProdCodeChanging(value);
					this.SendPropertyChanging();
					this._ProdCode = value;
					this.SendPropertyChanged("ProdCode");
					this.OnProdCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProdName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ProdName
		{
			get
			{
				return this._ProdName;
			}
			set
			{
				if ((this._ProdName != value))
				{
					this.OnProdNameChanging(value);
					this.SendPropertyChanging();
					this._ProdName = value;
					this.SendPropertyChanged("ProdName");
					this.OnProdNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingPrice", DbType="Money NOT NULL")]
		public decimal SellingPrice
		{
			get
			{
				return this._SellingPrice;
			}
			set
			{
				if ((this._SellingPrice != value))
				{
					this.OnSellingPriceChanging(value);
					this.SendPropertyChanging();
					this._SellingPrice = value;
					this.SendPropertyChanged("SellingPrice");
					this.OnSellingPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReOrderPoint", DbType="SmallInt NOT NULL")]
		public short ReOrderPoint
		{
			get
			{
				return this._ReOrderPoint;
			}
			set
			{
				if ((this._ReOrderPoint != value))
				{
					this.OnReOrderPointChanging(value);
					this.SendPropertyChanging();
					this._ReOrderPoint = value;
					this.SendPropertyChanged("ReOrderPoint");
					this.OnReOrderPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Decimal(4,2) NOT NULL")]
		public decimal Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock", DbType="Int NOT NULL")]
		public int Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				if ((this._Stock != value))
				{
					this.OnStockChanging(value);
					this.SendPropertyChanging();
					this._Stock = value;
					this.SendPropertyChanged("Stock");
					this.OnStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategory_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string SubCategory_Name
		{
			get
			{
				return this._SubCategory_Name;
			}
			set
			{
				if ((this._SubCategory_Name != value))
				{
					if (this._SubCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCategory_NameChanging(value);
					this.SendPropertyChanging();
					this._SubCategory_Name = value;
					this.SendPropertyChanged("SubCategory_Name");
					this.OnSubCategory_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_BranchId", DbType="Int NOT NULL")]
		public int Branch_BranchId
		{
			get
			{
				return this._Branch_BranchId;
			}
			set
			{
				if ((this._Branch_BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_BranchIdChanging(value);
					this.SendPropertyChanging();
					this._Branch_BranchId = value;
					this.SendPropertyChanged("Branch_BranchId");
					this.OnBranch_BranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_InvoiceItem", Storage="_InvoiceItems", ThisKey="ProdId", OtherKey="Product_ProdId")]
		public EntitySet<InvoiceItem> InvoiceItems
		{
			get
			{
				return this._InvoiceItems;
			}
			set
			{
				this._InvoiceItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Product", Storage="_Branch", ThisKey="Branch_BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._Branch_BranchId = value.BranchId;
					}
					else
					{
						this._Branch_BranchId = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_Product", Storage="_SubCategory", ThisKey="SubCategory_Name", OtherKey="Name", IsForeignKey=true)]
		public SubCategory SubCategory
		{
			get
			{
				return this._SubCategory.Entity;
			}
			set
			{
				SubCategory previousValue = this._SubCategory.Entity;
				if (((previousValue != value) 
							|| (this._SubCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategory.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._SubCategory.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._SubCategory_Name = value.Name;
					}
					else
					{
						this._SubCategory_Name = default(string);
					}
					this.SendPropertyChanged("SubCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceItems(InvoiceItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_InvoiceItems(InvoiceItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Purchase")]
	public partial class Purchase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PurcId;
		
		private string _PurcCode;
		
		private System.DateTime _PurcDate;
		
		private System.DateTime _PaymentDate;
		
		private string _Purchaser;
		
		private decimal _Amount;
		
		private decimal _Due;
		
		private int _Supplier_SuppId;
		
		private string _PaymentType_PType;
		
		private int _Branch_BranchId;
		
		private EntitySet<PurchaseItem> _PurchaseItems;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<PaymentType> _PaymentType;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurcIdChanging(long value);
    partial void OnPurcIdChanged();
    partial void OnPurcCodeChanging(string value);
    partial void OnPurcCodeChanged();
    partial void OnPurcDateChanging(System.DateTime value);
    partial void OnPurcDateChanged();
    partial void OnPaymentDateChanging(System.DateTime value);
    partial void OnPaymentDateChanged();
    partial void OnPurchaserChanging(string value);
    partial void OnPurchaserChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnDueChanging(decimal value);
    partial void OnDueChanged();
    partial void OnSupplier_SuppIdChanging(int value);
    partial void OnSupplier_SuppIdChanged();
    partial void OnPaymentType_PTypeChanging(string value);
    partial void OnPaymentType_PTypeChanged();
    partial void OnBranch_BranchIdChanging(int value);
    partial void OnBranch_BranchIdChanged();
    #endregion
		
		public Purchase()
		{
			this._PurchaseItems = new EntitySet<PurchaseItem>(new Action<PurchaseItem>(this.attach_PurchaseItems), new Action<PurchaseItem>(this.detach_PurchaseItems));
			this._Branch = default(EntityRef<Branch>);
			this._PaymentType = default(EntityRef<PaymentType>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurcId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PurcId
		{
			get
			{
				return this._PurcId;
			}
			set
			{
				if ((this._PurcId != value))
				{
					this.OnPurcIdChanging(value);
					this.SendPropertyChanging();
					this._PurcId = value;
					this.SendPropertyChanged("PurcId");
					this.OnPurcIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurcCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PurcCode
		{
			get
			{
				return this._PurcCode;
			}
			set
			{
				if ((this._PurcCode != value))
				{
					this.OnPurcCodeChanging(value);
					this.SendPropertyChanging();
					this._PurcCode = value;
					this.SendPropertyChanged("PurcCode");
					this.OnPurcCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurcDate", DbType="DateTime NOT NULL")]
		public System.DateTime PurcDate
		{
			get
			{
				return this._PurcDate;
			}
			set
			{
				if ((this._PurcDate != value))
				{
					this.OnPurcDateChanging(value);
					this.SendPropertyChanging();
					this._PurcDate = value;
					this.SendPropertyChanged("PurcDate");
					this.OnPurcDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="DateTime NOT NULL")]
		public System.DateTime PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Purchaser", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Purchaser
		{
			get
			{
				return this._Purchaser;
			}
			set
			{
				if ((this._Purchaser != value))
				{
					this.OnPurchaserChanging(value);
					this.SendPropertyChanging();
					this._Purchaser = value;
					this.SendPropertyChanged("Purchaser");
					this.OnPurchaserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Due", DbType="Money NOT NULL")]
		public decimal Due
		{
			get
			{
				return this._Due;
			}
			set
			{
				if ((this._Due != value))
				{
					this.OnDueChanging(value);
					this.SendPropertyChanging();
					this._Due = value;
					this.SendPropertyChanged("Due");
					this.OnDueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_SuppId", DbType="Int NOT NULL")]
		public int Supplier_SuppId
		{
			get
			{
				return this._Supplier_SuppId;
			}
			set
			{
				if ((this._Supplier_SuppId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplier_SuppIdChanging(value);
					this.SendPropertyChanging();
					this._Supplier_SuppId = value;
					this.SendPropertyChanged("Supplier_SuppId");
					this.OnSupplier_SuppIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentType_PType", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string PaymentType_PType
		{
			get
			{
				return this._PaymentType_PType;
			}
			set
			{
				if ((this._PaymentType_PType != value))
				{
					if (this._PaymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentType_PTypeChanging(value);
					this.SendPropertyChanging();
					this._PaymentType_PType = value;
					this.SendPropertyChanged("PaymentType_PType");
					this.OnPaymentType_PTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_BranchId", DbType="Int NOT NULL")]
		public int Branch_BranchId
		{
			get
			{
				return this._Branch_BranchId;
			}
			set
			{
				if ((this._Branch_BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_BranchIdChanging(value);
					this.SendPropertyChanging();
					this._Branch_BranchId = value;
					this.SendPropertyChanged("Branch_BranchId");
					this.OnBranch_BranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Purchase_PurchaseItem", Storage="_PurchaseItems", ThisKey="PurcId", OtherKey="Purchase_PurcId")]
		public EntitySet<PurchaseItem> PurchaseItems
		{
			get
			{
				return this._PurchaseItems;
			}
			set
			{
				this._PurchaseItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Purchase", Storage="_Branch", ThisKey="Branch_BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Purchases.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Purchases.Add(this);
						this._Branch_BranchId = value.BranchId;
					}
					else
					{
						this._Branch_BranchId = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Purchase", Storage="_PaymentType", ThisKey="PaymentType_PType", OtherKey="PType", IsForeignKey=true)]
		public PaymentType PaymentType
		{
			get
			{
				return this._PaymentType.Entity;
			}
			set
			{
				PaymentType previousValue = this._PaymentType.Entity;
				if (((previousValue != value) 
							|| (this._PaymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentType.Entity = null;
						previousValue.Purchases.Remove(this);
					}
					this._PaymentType.Entity = value;
					if ((value != null))
					{
						value.Purchases.Add(this);
						this._PaymentType_PType = value.PType;
					}
					else
					{
						this._PaymentType_PType = default(string);
					}
					this.SendPropertyChanged("PaymentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Purchase", Storage="_Supplier", ThisKey="Supplier_SuppId", OtherKey="SuppId", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Purchases.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Purchases.Add(this);
						this._Supplier_SuppId = value.SuppId;
					}
					else
					{
						this._Supplier_SuppId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchaseItems(PurchaseItem entity)
		{
			this.SendPropertyChanging();
			entity.Purchase = this;
		}
		
		private void detach_PurchaseItems(PurchaseItem entity)
		{
			this.SendPropertyChanging();
			entity.Purchase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseItem")]
	public partial class PurchaseItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ItemId;
		
		private string _ItemName;
		
		private int _Quantity;
		
		private decimal _UnitPrice;
		
		private decimal _Price;
		
		private long _Purchase_PurcId;
		
		private EntityRef<Purchase> _Purchase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIdChanging(long value);
    partial void OnItemIdChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnPurchase_PurcIdChanging(long value);
    partial void OnPurchase_PurcIdChanged();
    #endregion
		
		public PurchaseItem()
		{
			this._Purchase = default(EntityRef<Purchase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Money NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Purchase_PurcId", DbType="BigInt NOT NULL")]
		public long Purchase_PurcId
		{
			get
			{
				return this._Purchase_PurcId;
			}
			set
			{
				if ((this._Purchase_PurcId != value))
				{
					if (this._Purchase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchase_PurcIdChanging(value);
					this.SendPropertyChanging();
					this._Purchase_PurcId = value;
					this.SendPropertyChanged("Purchase_PurcId");
					this.OnPurchase_PurcIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Purchase_PurchaseItem", Storage="_Purchase", ThisKey="Purchase_PurcId", OtherKey="PurcId", IsForeignKey=true)]
		public Purchase Purchase
		{
			get
			{
				return this._Purchase.Entity;
			}
			set
			{
				Purchase previousValue = this._Purchase.Entity;
				if (((previousValue != value) 
							|| (this._Purchase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Purchase.Entity = null;
						previousValue.PurchaseItems.Remove(this);
					}
					this._Purchase.Entity = value;
					if ((value != null))
					{
						value.PurchaseItems.Add(this);
						this._Purchase_PurcId = value.PurcId;
					}
					else
					{
						this._Purchase_PurcId = default(long);
					}
					this.SendPropertyChanged("Purchase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RawProduct")]
	public partial class RawProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RPId;
		
		private string _RPCode;
		
		private string _RPName;
		
		private string _Description;
		
		private bool _Active;
		
		private short _ReOrderPoint;
		
		private int _Stock;
		
		private int _Branch_BranchId;
		
		private EntitySet<ProcessingItem> _ProcessingItems;
		
		private EntityRef<Branch> _Branch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRPIdChanging(int value);
    partial void OnRPIdChanged();
    partial void OnRPCodeChanging(string value);
    partial void OnRPCodeChanged();
    partial void OnRPNameChanging(string value);
    partial void OnRPNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnReOrderPointChanging(short value);
    partial void OnReOrderPointChanged();
    partial void OnStockChanging(int value);
    partial void OnStockChanged();
    partial void OnBranch_BranchIdChanging(int value);
    partial void OnBranch_BranchIdChanged();
    #endregion
		
		public RawProduct()
		{
			this._ProcessingItems = new EntitySet<ProcessingItem>(new Action<ProcessingItem>(this.attach_ProcessingItems), new Action<ProcessingItem>(this.detach_ProcessingItems));
			this._Branch = default(EntityRef<Branch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RPId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RPId
		{
			get
			{
				return this._RPId;
			}
			set
			{
				if ((this._RPId != value))
				{
					this.OnRPIdChanging(value);
					this.SendPropertyChanging();
					this._RPId = value;
					this.SendPropertyChanged("RPId");
					this.OnRPIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RPCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string RPCode
		{
			get
			{
				return this._RPCode;
			}
			set
			{
				if ((this._RPCode != value))
				{
					this.OnRPCodeChanging(value);
					this.SendPropertyChanging();
					this._RPCode = value;
					this.SendPropertyChanged("RPCode");
					this.OnRPCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RPName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string RPName
		{
			get
			{
				return this._RPName;
			}
			set
			{
				if ((this._RPName != value))
				{
					this.OnRPNameChanging(value);
					this.SendPropertyChanging();
					this._RPName = value;
					this.SendPropertyChanged("RPName");
					this.OnRPNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReOrderPoint", DbType="SmallInt NOT NULL")]
		public short ReOrderPoint
		{
			get
			{
				return this._ReOrderPoint;
			}
			set
			{
				if ((this._ReOrderPoint != value))
				{
					this.OnReOrderPointChanging(value);
					this.SendPropertyChanging();
					this._ReOrderPoint = value;
					this.SendPropertyChanged("ReOrderPoint");
					this.OnReOrderPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock", DbType="Int NOT NULL")]
		public int Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				if ((this._Stock != value))
				{
					this.OnStockChanging(value);
					this.SendPropertyChanging();
					this._Stock = value;
					this.SendPropertyChanged("Stock");
					this.OnStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_BranchId", DbType="Int NOT NULL")]
		public int Branch_BranchId
		{
			get
			{
				return this._Branch_BranchId;
			}
			set
			{
				if ((this._Branch_BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_BranchIdChanging(value);
					this.SendPropertyChanging();
					this._Branch_BranchId = value;
					this.SendPropertyChanged("Branch_BranchId");
					this.OnBranch_BranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RawProduct_ProcessingItem", Storage="_ProcessingItems", ThisKey="RPId", OtherKey="RawProduct_RPId")]
		public EntitySet<ProcessingItem> ProcessingItems
		{
			get
			{
				return this._ProcessingItems;
			}
			set
			{
				this._ProcessingItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_RawProduct", Storage="_Branch", ThisKey="Branch_BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.RawProducts.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.RawProducts.Add(this);
						this._Branch_BranchId = value.BranchId;
					}
					else
					{
						this._Branch_BranchId = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProcessingItems(ProcessingItem entity)
		{
			this.SendPropertyChanging();
			entity.RawProduct = this;
		}
		
		private void detach_ProcessingItems(ProcessingItem entity)
		{
			this.SendPropertyChanging();
			entity.RawProduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ServId;
		
		private string _ServCode;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _EstDeliveryDate;
		
		private System.DateTime _DeliveryDate;
		
		private string _Status;
		
		private string _Remark;
		
		private decimal _TotalCharge;
		
		private int _Customer_CustId;
		
		private string _ServiceType_Name;
		
		private int _Branch_BranchId;
		
		private EntitySet<ServiceItem> _ServiceItems;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<ServiceType> _ServiceType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServIdChanging(long value);
    partial void OnServIdChanged();
    partial void OnServCodeChanging(string value);
    partial void OnServCodeChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnEstDeliveryDateChanging(System.DateTime value);
    partial void OnEstDeliveryDateChanged();
    partial void OnDeliveryDateChanging(System.DateTime value);
    partial void OnDeliveryDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnTotalChargeChanging(decimal value);
    partial void OnTotalChargeChanged();
    partial void OnCustomer_CustIdChanging(int value);
    partial void OnCustomer_CustIdChanged();
    partial void OnServiceType_NameChanging(string value);
    partial void OnServiceType_NameChanged();
    partial void OnBranch_BranchIdChanging(int value);
    partial void OnBranch_BranchIdChanged();
    #endregion
		
		public Service()
		{
			this._ServiceItems = new EntitySet<ServiceItem>(new Action<ServiceItem>(this.attach_ServiceItems), new Action<ServiceItem>(this.detach_ServiceItems));
			this._Branch = default(EntityRef<Branch>);
			this._Customer = default(EntityRef<Customer>);
			this._ServiceType = default(EntityRef<ServiceType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ServId
		{
			get
			{
				return this._ServId;
			}
			set
			{
				if ((this._ServId != value))
				{
					this.OnServIdChanging(value);
					this.SendPropertyChanging();
					this._ServId = value;
					this.SendPropertyChanged("ServId");
					this.OnServIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ServCode
		{
			get
			{
				return this._ServCode;
			}
			set
			{
				if ((this._ServCode != value))
				{
					this.OnServCodeChanging(value);
					this.SendPropertyChanging();
					this._ServCode = value;
					this.SendPropertyChanged("ServCode");
					this.OnServCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstDeliveryDate", DbType="DateTime NOT NULL")]
		public System.DateTime EstDeliveryDate
		{
			get
			{
				return this._EstDeliveryDate;
			}
			set
			{
				if ((this._EstDeliveryDate != value))
				{
					this.OnEstDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._EstDeliveryDate = value;
					this.SendPropertyChanged("EstDeliveryDate");
					this.OnEstDeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDate", DbType="DateTime NOT NULL")]
		public System.DateTime DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this.OnDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDate = value;
					this.SendPropertyChanged("DeliveryDate");
					this.OnDeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="VarChar(MAX)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCharge", DbType="Money NOT NULL")]
		public decimal TotalCharge
		{
			get
			{
				return this._TotalCharge;
			}
			set
			{
				if ((this._TotalCharge != value))
				{
					this.OnTotalChargeChanging(value);
					this.SendPropertyChanging();
					this._TotalCharge = value;
					this.SendPropertyChanged("TotalCharge");
					this.OnTotalChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_CustId", DbType="Int NOT NULL")]
		public int Customer_CustId
		{
			get
			{
				return this._Customer_CustId;
			}
			set
			{
				if ((this._Customer_CustId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_CustIdChanging(value);
					this.SendPropertyChanging();
					this._Customer_CustId = value;
					this.SendPropertyChanged("Customer_CustId");
					this.OnCustomer_CustIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceType_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ServiceType_Name
		{
			get
			{
				return this._ServiceType_Name;
			}
			set
			{
				if ((this._ServiceType_Name != value))
				{
					if (this._ServiceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceType_NameChanging(value);
					this.SendPropertyChanging();
					this._ServiceType_Name = value;
					this.SendPropertyChanged("ServiceType_Name");
					this.OnServiceType_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_BranchId", DbType="Int NOT NULL")]
		public int Branch_BranchId
		{
			get
			{
				return this._Branch_BranchId;
			}
			set
			{
				if ((this._Branch_BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_BranchIdChanging(value);
					this.SendPropertyChanging();
					this._Branch_BranchId = value;
					this.SendPropertyChanged("Branch_BranchId");
					this.OnBranch_BranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceItem", Storage="_ServiceItems", ThisKey="ServId", OtherKey="Service_ServId")]
		public EntitySet<ServiceItem> ServiceItems
		{
			get
			{
				return this._ServiceItems;
			}
			set
			{
				this._ServiceItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Service", Storage="_Branch", ThisKey="Branch_BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._Branch_BranchId = value.BranchId;
					}
					else
					{
						this._Branch_BranchId = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Service", Storage="_Customer", ThisKey="Customer_CustId", OtherKey="CustId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._Customer_CustId = value.CustId;
					}
					else
					{
						this._Customer_CustId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceType_Service", Storage="_ServiceType", ThisKey="ServiceType_Name", OtherKey="Name", IsForeignKey=true)]
		public ServiceType ServiceType
		{
			get
			{
				return this._ServiceType.Entity;
			}
			set
			{
				ServiceType previousValue = this._ServiceType.Entity;
				if (((previousValue != value) 
							|| (this._ServiceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceType.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._ServiceType.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._ServiceType_Name = value.Name;
					}
					else
					{
						this._ServiceType_Name = default(string);
					}
					this.SendPropertyChanged("ServiceType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceItems(ServiceItem entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServiceItems(ServiceItem entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceItem")]
	public partial class ServiceItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SIId;
		
		private string _ServiceName;
		
		private string _ServiceDetails;
		
		private decimal _Charge;
		
		private long _Service_ServId;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSIIdChanging(int value);
    partial void OnSIIdChanged();
    partial void OnServiceNameChanging(string value);
    partial void OnServiceNameChanged();
    partial void OnServiceDetailsChanging(string value);
    partial void OnServiceDetailsChanged();
    partial void OnChargeChanging(decimal value);
    partial void OnChargeChanged();
    partial void OnService_ServIdChanging(long value);
    partial void OnService_ServIdChanged();
    #endregion
		
		public ServiceItem()
		{
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SIId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SIId
		{
			get
			{
				return this._SIId;
			}
			set
			{
				if ((this._SIId != value))
				{
					this.OnSIIdChanging(value);
					this.SendPropertyChanging();
					this._SIId = value;
					this.SendPropertyChanged("SIId");
					this.OnSIIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceName", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this.OnServiceNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceName = value;
					this.SendPropertyChanged("ServiceName");
					this.OnServiceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceDetails", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ServiceDetails
		{
			get
			{
				return this._ServiceDetails;
			}
			set
			{
				if ((this._ServiceDetails != value))
				{
					this.OnServiceDetailsChanging(value);
					this.SendPropertyChanging();
					this._ServiceDetails = value;
					this.SendPropertyChanged("ServiceDetails");
					this.OnServiceDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Charge", DbType="Money NOT NULL")]
		public decimal Charge
		{
			get
			{
				return this._Charge;
			}
			set
			{
				if ((this._Charge != value))
				{
					this.OnChargeChanging(value);
					this.SendPropertyChanging();
					this._Charge = value;
					this.SendPropertyChanged("Charge");
					this.OnChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Service_ServId", DbType="BigInt NOT NULL")]
		public long Service_ServId
		{
			get
			{
				return this._Service_ServId;
			}
			set
			{
				if ((this._Service_ServId != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnService_ServIdChanging(value);
					this.SendPropertyChanging();
					this._Service_ServId = value;
					this.SendPropertyChanged("Service_ServId");
					this.OnService_ServIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceItem", Storage="_Service", ThisKey="Service_ServId", OtherKey="ServId", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServiceItems.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServiceItems.Add(this);
						this._Service_ServId = value.ServId;
					}
					else
					{
						this._Service_ServId = default(long);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceType")]
	public partial class ServiceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private EntitySet<Service> _Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ServiceType()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceType_Service", Storage="_Services", ThisKey="Name", OtherKey="ServiceType_Name")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceType = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubCategory")]
	public partial class SubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Category_Name;
		
		private string _Code;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategory_NameChanging(string value);
    partial void OnCategory_NameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public SubCategory()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Category_Name
		{
			get
			{
				return this._Category_Name;
			}
			set
			{
				if ((this._Category_Name != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategory_NameChanging(value);
					this.SendPropertyChanging();
					this._Category_Name = value;
					this.SendPropertyChanged("Category_Name");
					this.OnCategory_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_Product", Storage="_Products", ThisKey="Name", OtherKey="SubCategory_Name")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_SubCategory", Storage="_Category", ThisKey="Category_Name", OtherKey="Name", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.SubCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.SubCategories.Add(this);
						this._Category_Name = value.Name;
					}
					else
					{
						this._Category_Name = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SuppId;
		
		private string _SuppCode;
		
		private string _SuppName;
		
		private string _Address;
		
		private string _ContactPerson;
		
		private string _ContactNo;
		
		private string _Email;
		
		private string _Remark;
		
		private int _Branch_BranchId;
		
		private EntitySet<Purchase> _Purchases;
		
		private EntityRef<Branch> _Branch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppIdChanging(int value);
    partial void OnSuppIdChanged();
    partial void OnSuppCodeChanging(string value);
    partial void OnSuppCodeChanged();
    partial void OnSuppNameChanging(string value);
    partial void OnSuppNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContactPersonChanging(string value);
    partial void OnContactPersonChanged();
    partial void OnContactNoChanging(string value);
    partial void OnContactNoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnBranch_BranchIdChanging(int value);
    partial void OnBranch_BranchIdChanged();
    #endregion
		
		public Supplier()
		{
			this._Purchases = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchases), new Action<Purchase>(this.detach_Purchases));
			this._Branch = default(EntityRef<Branch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuppId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SuppId
		{
			get
			{
				return this._SuppId;
			}
			set
			{
				if ((this._SuppId != value))
				{
					this.OnSuppIdChanging(value);
					this.SendPropertyChanging();
					this._SuppId = value;
					this.SendPropertyChanged("SuppId");
					this.OnSuppIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuppCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this.OnSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._SuppCode = value;
					this.SendPropertyChanged("SuppCode");
					this.OnSuppCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuppName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SuppName
		{
			get
			{
				return this._SuppName;
			}
			set
			{
				if ((this._SuppName != value))
				{
					this.OnSuppNameChanging(value);
					this.SendPropertyChanging();
					this._SuppName = value;
					this.SendPropertyChanged("SuppName");
					this.OnSuppNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPerson", DbType="VarChar(100)")]
		public string ContactPerson
		{
			get
			{
				return this._ContactPerson;
			}
			set
			{
				if ((this._ContactPerson != value))
				{
					this.OnContactPersonChanging(value);
					this.SendPropertyChanging();
					this._ContactPerson = value;
					this.SendPropertyChanged("ContactPerson");
					this.OnContactPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="VarChar(MAX)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_BranchId", DbType="Int NOT NULL")]
		public int Branch_BranchId
		{
			get
			{
				return this._Branch_BranchId;
			}
			set
			{
				if ((this._Branch_BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_BranchIdChanging(value);
					this.SendPropertyChanging();
					this._Branch_BranchId = value;
					this.SendPropertyChanged("Branch_BranchId");
					this.OnBranch_BranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Purchase", Storage="_Purchases", ThisKey="SuppId", OtherKey="Supplier_SuppId")]
		public EntitySet<Purchase> Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				this._Purchases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Supplier", Storage="_Branch", ThisKey="Branch_BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._Branch_BranchId = value.BranchId;
					}
					else
					{
						this._Branch_BranchId = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserType")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UsrType;
		
		private EntitySet<IGUser> _IGUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsrTypeChanging(string value);
    partial void OnUsrTypeChanged();
    #endregion
		
		public UserType()
		{
			this._IGUsers = new EntitySet<IGUser>(new Action<IGUser>(this.attach_IGUsers), new Action<IGUser>(this.detach_IGUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsrType", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UsrType
		{
			get
			{
				return this._UsrType;
			}
			set
			{
				if ((this._UsrType != value))
				{
					this.OnUsrTypeChanging(value);
					this.SendPropertyChanging();
					this._UsrType = value;
					this.SendPropertyChanged("UsrType");
					this.OnUsrTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_IGUser", Storage="_IGUsers", ThisKey="UsrType", OtherKey="UserType_UsrType")]
		public EntitySet<IGUser> IGUsers
		{
			get
			{
				return this._IGUsers;
			}
			set
			{
				this._IGUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IGUsers(IGUser entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_IGUsers(IGUser entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Voucher")]
	public partial class Voucher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VoucId;
		
		private string _VoucCode;
		
		private System.DateTime _VoucDate;
		
		private string _ReferenceNo;
		
		private string _Name;
		
		private string _Details;
		
		private int _Branch_BranchId;
		
		private EntitySet<VoucherItem> _VoucherItems;
		
		private EntityRef<Branch> _Branch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVoucIdChanging(long value);
    partial void OnVoucIdChanged();
    partial void OnVoucCodeChanging(string value);
    partial void OnVoucCodeChanged();
    partial void OnVoucDateChanging(System.DateTime value);
    partial void OnVoucDateChanged();
    partial void OnReferenceNoChanging(string value);
    partial void OnReferenceNoChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnBranch_BranchIdChanging(int value);
    partial void OnBranch_BranchIdChanged();
    #endregion
		
		public Voucher()
		{
			this._VoucherItems = new EntitySet<VoucherItem>(new Action<VoucherItem>(this.attach_VoucherItems), new Action<VoucherItem>(this.detach_VoucherItems));
			this._Branch = default(EntityRef<Branch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoucId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long VoucId
		{
			get
			{
				return this._VoucId;
			}
			set
			{
				if ((this._VoucId != value))
				{
					this.OnVoucIdChanging(value);
					this.SendPropertyChanging();
					this._VoucId = value;
					this.SendPropertyChanged("VoucId");
					this.OnVoucIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoucCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string VoucCode
		{
			get
			{
				return this._VoucCode;
			}
			set
			{
				if ((this._VoucCode != value))
				{
					this.OnVoucCodeChanging(value);
					this.SendPropertyChanging();
					this._VoucCode = value;
					this.SendPropertyChanged("VoucCode");
					this.OnVoucCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoucDate", DbType="DateTime NOT NULL")]
		public System.DateTime VoucDate
		{
			get
			{
				return this._VoucDate;
			}
			set
			{
				if ((this._VoucDate != value))
				{
					this.OnVoucDateChanging(value);
					this.SendPropertyChanging();
					this._VoucDate = value;
					this.SendPropertyChanged("VoucDate");
					this.OnVoucDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceNo", DbType="VarChar(20)")]
		public string ReferenceNo
		{
			get
			{
				return this._ReferenceNo;
			}
			set
			{
				if ((this._ReferenceNo != value))
				{
					this.OnReferenceNoChanging(value);
					this.SendPropertyChanging();
					this._ReferenceNo = value;
					this.SendPropertyChanged("ReferenceNo");
					this.OnReferenceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="VarChar(MAX)")]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_BranchId", DbType="Int NOT NULL")]
		public int Branch_BranchId
		{
			get
			{
				return this._Branch_BranchId;
			}
			set
			{
				if ((this._Branch_BranchId != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranch_BranchIdChanging(value);
					this.SendPropertyChanging();
					this._Branch_BranchId = value;
					this.SendPropertyChanged("Branch_BranchId");
					this.OnBranch_BranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_VoucherItem", Storage="_VoucherItems", ThisKey="VoucId", OtherKey="Voucher_VoucId")]
		public EntitySet<VoucherItem> VoucherItems
		{
			get
			{
				return this._VoucherItems;
			}
			set
			{
				this._VoucherItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Voucher", Storage="_Branch", ThisKey="Branch_BranchId", OtherKey="BranchId", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.Vouchers.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.Vouchers.Add(this);
						this._Branch_BranchId = value.BranchId;
					}
					else
					{
						this._Branch_BranchId = default(int);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VoucherItems(VoucherItem entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = this;
		}
		
		private void detach_VoucherItems(VoucherItem entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = null;
		}
	}
}
#pragma warning restore 1591
